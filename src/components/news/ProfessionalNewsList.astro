---
// Componente para mostrar la lista de noticias agrupadas por fecha
import NewsCard from "./NewsCard.astro";
import type { CollectionEntry } from "astro:content";
import TopPanel from "./TopPanel.astro";

interface Props {
    groupedPosts: Record<string, CollectionEntry<"blog">[]>;
}

const { groupedPosts } = Astro.props;

// Obtener la fecha actual y formatearla en espaÃ±ol
const now = new Date();
const day = now.getDate();
const month = now.getMonth();
const year = now.getFullYear();
const weekday = new Date().toLocaleString("es-ES", { weekday: "long" });

const months = [
    "enero",
    "febrero",
    "marzo",
    "abril",
    "mayo",
    "junio",
    "julio",
    "agosto",
    "septiembre",
    "octubre",
    "noviembre",
    "diciembre",
];

const formattedDate = `${day} de ${months[month]} de ${year}`;
---

<div class="news-container">
    <TopPanel date={formattedDate} />

    <div class="news-content">
        <div class="news-column">
            {
                Object.entries(groupedPosts).map(
                    ([date, datePosts], dateIndex) => (
                        <div
                            class={`news-date-group ${dateIndex === 0 ? "today-group" : ""}`}
                        >
                            <div class="date-header">
                                <h3 class="date-heading">
                                    {dateIndex === 0 ? (
                                        <>ðŸ“ˆ Ãšltimas noticias - {date}</>
                                    ) : (
                                        <>ðŸ“° Noticias del {date}</>
                                    )}
                                </h3>
                            </div>
                            <div class="news-grid">
                                {datePosts.map((post, index) => (
                                    <NewsCard
                                        title={post.data.title}
                                        url={`/blog/${post.id}/`}
                                        isHighlight={
                                            index === 0 && dateIndex === 0
                                        }
                                        category={"Noticias"}
                                        pubDate={post.data.pubDate}
                                        newsId={post.id}
                                        impact={post.data.impact as "alto" | "medio" | "bajo" | undefined}
                                        sectors={post.data.sectors}
                                        source={post.data.source}
                                        sentiment={post.data.sentiment as "positivo" | "neutral" | "negativo" | undefined}
                                        relevanceScore={post.data.relevanceScore ?? undefined}
                                        tickers={post.data.tickers}
                                    />
                                ))}
                            </div>
                        </div>
                    ),
                )
            }
        </div>
    </div>
</div>

<style>
    
</style>