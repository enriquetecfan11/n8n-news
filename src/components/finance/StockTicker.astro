---
// Lista de símbolos financieros a mostrar
const stockSymbols = [
    { symbol: "^GSPC", name: "S&P 500" },
    { symbol: "^IXIC", name: "NASDAQ" },
    { symbol: "^DJI", name: "Dow Jones" },
    { symbol: "BTC-USD", name: "Bitcoin" },
    { symbol: "ETH-USD", name: "Ethereum" },
    { symbol: "AAPL", name: "Apple" },
    { symbol: "MSFT", name: "Microsoft" },
    { symbol: "GOOGL", name: "Google" },
    { symbol: "META", name: "Meta" },
    { symbol: "NVDA", name: "NVIDIA" },
    { symbol: "AMZN", name: "Amazon" },
    { symbol: "TSLA", name: "Tesla" },
];

// Props opcionales para personalizar el ticker
interface Props {
    speed?: number; // Velocidad de animación en segundos (más bajo = más rápido)
    darkMode?: boolean; // Modo oscuro o claro
    refreshInterval?: number; // Intervalo para refrescar datos (milisegundos)
    accentColor?: string; // Color de acento personalizado
}

// Valores por defecto
const {
    speed = 90,
    darkMode = false,
    refreshInterval = 60000,
    accentColor = darkMode ? "#4a80ff" : "#1a73e8",
} = Astro.props;

// No podemos hacer la petición a la API durante la compilación de Astro
// Usaremos JavaScript en el cliente para obtener los datos reales
---

<div class={`stock-ticker-container ${darkMode ? "dark" : "light"}`}>
    <div class="ticker-wrap">
        <div class="ticker" id="stock-ticker">
            <!-- Los datos se cargarán dinámicamente con JavaScript -->
            <div class="ticker-loading">
                <div class="loading-spinner"></div>
                <span>Cargando datos financieros...</span>
            </div>
        </div>
    </div>
</div>

<style define:vars={{ speed, accentColor }}>
    .stock-ticker-container {
        width: 100%;
        height: 60px;
        overflow: hidden;
        margin: 0.8rem 0;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        border-radius: 12px;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
            Helvetica, Arial, sans-serif;
        transition: all 0.3s ease;
    }

    .stock-ticker-container:hover {
        box-shadow: 0 6px 24px rgba(0, 0, 0, 0.15);
        transform: translateY(-2px);
    }

    .stock-ticker-container.dark {
        background: linear-gradient(135deg, #1f2937 0%, #111827 100%);
        color: #f3f4f6;
        border: 1px solid rgba(255, 255, 255, 0.05);
    }

    .stock-ticker-container.light {
        background: linear-gradient(135deg, #ffffff 0%, #f5f7fa 100%);
        color: #111827;
        border: 1px solid rgba(0, 0, 0, 0.05);
    }

    .ticker-wrap {
        width: 100%;
        height: 100%;
        overflow: hidden;
        position: relative;
    }

    .ticker {
        display: inline-flex;
        white-space: nowrap;
        height: 100%;
        align-items: center;
        animation: ticker calc(var(--speed) * 1s) linear infinite;
        will-change: transform;
        position: relative;
        padding-left: 100%;
    }

    .ticker-item {
        display: inline-flex;
        align-items: center;
        height: 100%;
        padding: 0 22px;
        position: relative;
        font-size: 15px;
        transition: transform 0.3s ease;
    }

    .ticker-item:hover {
        transform: scale(1.05);
    }

    .ticker-item:not(:last-child):after {
        content: "";
        position: absolute;
        right: 0;
        top: 25%;
        height: 50%;
        width: 1px;
        background: linear-gradient(
            to bottom,
            rgba(160, 174, 192, 0),
            rgba(160, 174, 192, 0.3),
            rgba(160, 174, 192, 0)
        );
    }

    .ticker-symbol {
        font-weight: 700;
        margin-right: 14px;
        position: relative;
        background: linear-gradient(135deg, var(--accentColor), #6366f1);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        text-fill-color: transparent;
    }

    .ticker-symbol::before {
        content: "";
        position: absolute;
        bottom: -2px;
        left: 0;
        width: 100%;
        height: 2px;
        border-radius: 1px;
        background: linear-gradient(90deg, var(--accentColor), transparent);
        transform: scaleX(0.7);
        transform-origin: left;
        opacity: 0.7;
    }

    .ticker-price {
        font-weight: 600;
        margin-right: 12px;
        letter-spacing: 0.2px;
    }

    .ticker-change {
        font-weight: 700;
        padding: 3px 8px;
        border-radius: 6px;
        font-size: 13px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        transition: all 0.2s ease;
        letter-spacing: 0.5px;
    }

    .ticker-change.positive {
        background: linear-gradient(
            135deg,
            rgba(16, 185, 129, 0.15) 0%,
            rgba(5, 150, 105, 0.25) 100%
        );
        color: #10b981;
        border: 1px solid rgba(16, 185, 129, 0.3);
    }

    .ticker-change.negative {
        background: linear-gradient(
            135deg,
            rgba(239, 68, 68, 0.15) 0%,
            rgba(220, 38, 38, 0.25) 100%
        );
        color: #ef4444;
        border: 1px solid rgba(239, 68, 68, 0.3);
    }

    .light .ticker-change.positive {
        background: linear-gradient(
            135deg,
            rgba(16, 185, 129, 0.1) 0%,
            rgba(5, 150, 105, 0.2) 100%
        );
        color: #059669;
    }

    .light .ticker-change.negative {
        background: linear-gradient(
            135deg,
            rgba(239, 68, 68, 0.1) 0%,
            rgba(220, 38, 38, 0.2) 100%
        );
        color: #dc2626;
    }

    .ticker-change.positive::before {
        content: "▲ ";
        font-size: 10px;
        margin-right: 2px;
    }

    .ticker-change.negative::before {
        content: "▼ ";
        font-size: 10px;
        margin-right: 2px;
    }

    .ticker-loading {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        height: 100%;
        padding: 0 20px;
        font-style: italic;
        opacity: 0.7;
        gap: 12px;
    }

    .loading-spinner {
        width: 18px;
        height: 18px;
        border: 3px solid rgba(var(--accentColor), 0.2);
        border-top-color: var(--accentColor);
        border-radius: 50%;
        animation: spinner 0.8s linear infinite;
    }

    @keyframes spinner {
        to {
            transform: rotate(360deg);
        }
    }

    @keyframes ticker {
        0% {
            transform: translate3d(0, 0, 0);
        }
        100% {
            transform: translate3d(-100%, 0, 0);
        }
    }

    /* Pausar la animación cuando la página no está visible */
    @media (prefers-reduced-motion) {
        .ticker {
            animation-play-state: paused;
        }
    }

    /* Versión para móviles */
    @media (max-width: 768px) {
        .stock-ticker-container {
            height: 50px;
            border-radius: 8px;
        }

        .ticker-item {
            padding: 0 16px;
            font-size: 14px;
        }

        .ticker-symbol {
            margin-right: 8px;
        }

        .ticker-change {
            padding: 2px 6px;
        }
    }
</style>

<script>
    // Lista de símbolos financieros
    const stockSymbols = [
        { symbol: "^GSPC", name: "S&P 500" },
        { symbol: "^IXIC", name: "NASDAQ" },
        { symbol: "^DJI", name: "Dow Jones" },
        { symbol: "BTC-USD", name: "Bitcoin" },
        { symbol: "ETH-USD", name: "Ethereum" },
        { symbol: "AAPL", name: "Apple" },
        { symbol: "MSFT", name: "Microsoft" },
        { symbol: "GOOGL", name: "Google" },
        { symbol: "META", name: "Meta" },
        { symbol: "NVDA", name: "NVIDIA" },
        { symbol: "AMZN", name: "Amazon" },
        { symbol: "TSLA", name: "Tesla" },
    ];

    // Datos mock para simular resultados de la API
    // Actualizados a fecha 21 de abril de 2025
    const MOCK_STOCK_DATA = [
        {
            symbol: "^GSPC",
            regularMarketPrice: 6382.47,
            regularMarketChange: 23.55,
            regularMarketChangePercent: 0.37,
            regularMarketTime: 1745037600,
        },
        {
            symbol: "^IXIC",
            regularMarketPrice: 18724.19,
            regularMarketChange: -42.68,
            regularMarketChangePercent: -0.23,
            regularMarketTime: 1745037600,
        },
        {
            symbol: "^DJI",
            regularMarketPrice: 43285.72,
            regularMarketChange: 107.32,
            regularMarketChangePercent: 0.25,
            regularMarketTime: 1745037600,
        },
        {
            symbol: "BTC-USD",
            regularMarketPrice: 92475.83,
            regularMarketChange: 1256.43,
            regularMarketChangePercent: 1.38,
            regularMarketTime: 1745037600,
        },
        {
            symbol: "ETH-USD",
            regularMarketPrice: 5473.21,
            regularMarketChange: 87.64,
            regularMarketChangePercent: 1.63,
            regularMarketTime: 1745037600,
        },
        {
            symbol: "AAPL",
            regularMarketPrice: 247.38,
            regularMarketChange: 3.25,
            regularMarketChangePercent: 1.33,
            regularMarketTime: 1745037600,
        },
        {
            symbol: "MSFT",
            regularMarketPrice: 583.72,
            regularMarketChange: 4.92,
            regularMarketChangePercent: 0.85,
            regularMarketTime: 1745037600,
        },
        {
            symbol: "GOOGL",
            regularMarketPrice: 212.47,
            regularMarketChange: -1.83,
            regularMarketChangePercent: -0.86,
            regularMarketTime: 1745037600,
        },
        {
            symbol: "META",
            regularMarketPrice: 624.75,
            regularMarketChange: 8.34,
            regularMarketChangePercent: 1.35,
            regularMarketTime: 1745037600,
        },
        {
            symbol: "NVDA",
            regularMarketPrice: 1284.63,
            regularMarketChange: 27.89,
            regularMarketChangePercent: 2.22,
            regularMarketTime: 1745037600,
        },
        {
            symbol: "AMZN",
            regularMarketPrice: 193.84,
            regularMarketChange: -2.36,
            regularMarketChangePercent: -1.2,
            regularMarketTime: 1745037600,
        },
        {
            symbol: "TSLA",
            regularMarketPrice: 328.94,
            regularMarketChange: -5.27,
            regularMarketChangePercent: -1.58,
            regularMarketTime: 1745037600,
        },
    ];

    // Función para simular obtener datos - ahora devuelve los datos mock directamente
    async function fetchStockData() {
        // Añadir un pequeño retraso para simular el tiempo de respuesta de una API
        await new Promise((resolve) => setTimeout(resolve, 600));

        // En un entorno real, aquí iría el código para conectar con la API
        // Pero ahora usamos datos mock estáticos
        return MOCK_STOCK_DATA;
    }

    // Función para actualizar el ticker con los datos
    async function updateTickerData() {
        const tickerElement = document.getElementById("stock-ticker");
        if (!tickerElement) return;

        // Mostrar indicador de carga
        tickerElement.innerHTML = `
            <div class="ticker-loading">
                <div class="loading-spinner"></div>
                <span>Cargando datos financieros en tiempo real...</span>
            </div>
        `;

        try {
            // Obtener datos mock
            const stockData = await fetchStockData();

            // Limpiar el ticker
            tickerElement.innerHTML = "";

            // Crear los elementos del ticker con datos
            const tickerItems = stockData.map((quote) => {
                // Buscar el nombre amigable del símbolo
                const stockInfo = stockSymbols.find(
                    (stock) => stock.symbol === quote.symbol,
                ) || { name: quote.symbol };

                // Formatear el precio
                const price = quote.regularMarketPrice
                    ? quote.regularMarketPrice.toLocaleString("es-ES", {
                          minimumFractionDigits: 2,
                          maximumFractionDigits: 2,
                      })
                    : "N/A";

                // Formatear el cambio porcentual
                const changePercent = quote.regularMarketChangePercent
                    ? Math.abs(quote.regularMarketChangePercent).toFixed(2)
                    : "0.00";

                // Determinar si es positivo o negativo
                const isPositive = quote.regularMarketChange > 0;

                // Crear el elemento HTML
                const tickerItem = document.createElement("div");
                tickerItem.className = "ticker-item";
                tickerItem.innerHTML = `
                    <span class="ticker-symbol">${stockInfo.name}</span>
                    <span class="ticker-price">${price}</span>
                    <span class="ticker-change ${isPositive ? "positive" : "negative"}">
                        ${changePercent}%
                    </span>
                `;

                // Añadir efecto de tooltip con información adicional
                tickerItem.title = `${stockInfo.name}: ${price} (${isPositive ? "+" : "-"}${changePercent}%)`;

                return tickerItem;
            });

            // Añadir los elementos al ticker
            tickerItems.forEach((item) => tickerElement.appendChild(item));

            // Duplicar los elementos para crear el efecto de desplazamiento infinito
            [...tickerItems].forEach((item) => {
                const clone = item.cloneNode(true);
                tickerElement.appendChild(clone);
            });

            // Reiniciar la animación
            void tickerElement.offsetWidth;
            tickerElement.style.animationName = "none";
            setTimeout(() => {
                tickerElement.style.animationName = "ticker";
            }, 10);

            // Añadir marca de último actualizado
            const timestamp = new Date().toLocaleTimeString("es-ES");
            const statusSpan = document.createElement("div");
            statusSpan.className = "ticker-status";
            statusSpan.style.cssText =
                "position: absolute; bottom: 2px; right: 10px; font-size: 10px; opacity: 0.7;";
            statusSpan.innerHTML = `Actualizado: ${timestamp}`;
            tickerElement.parentElement.appendChild(statusSpan);
        } catch (error) {
            console.error("Error al actualizar el ticker:", error);
            tickerElement.innerHTML = `
                <div class="ticker-loading">
                    <span>Error al cargar datos financieros. <a href="#" id="retry-ticker">Reintentar</a></span>
                </div>
            `;

            // Añadir botón de reintento
            document
                .getElementById("retry-ticker")
                ?.addEventListener("click", (e) => {
                    e.preventDefault();
                    updateTickerData();
                });
        }
    }

    // Inicializar el ticker cuando el DOM esté listo
    document.addEventListener("DOMContentLoaded", () => {
        // Cargar datos iniciales
        updateTickerData();

        // Configurar actualización periódica según props
        const refreshInterval =
            document.querySelector(".stock-ticker-container").dataset
                .refreshInterval || 60000;

        // En un entorno real, activaríamos la actualización periódica
        // En este caso con datos mock, solo actualizamos cada 5 minutos para simular cambios
        setInterval(() => {
            // Añadimos una pequeña variación aleatoria a los datos mock para simular cambios
            MOCK_STOCK_DATA.forEach((stock) => {
                const changePercent = (Math.random() * 2 - 1) * 0.5; // Variación entre -0.5% y +0.5%
                const priceChange =
                    stock.regularMarketPrice * (changePercent / 100);

                // Actualizar precio y cambio
                stock.regularMarketPrice += priceChange;
                stock.regularMarketChange = priceChange;
                stock.regularMarketChangePercent = changePercent;
                stock.regularMarketTime = Math.floor(Date.now() / 1000);
            });

            updateTickerData();
        }, 300000); // 5 minutos

        // Pausar cuando el usuario cambia de pestaña
        document.addEventListener("visibilitychange", () => {
            const ticker = document.querySelector(".ticker");
            if (ticker) {
                ticker.style.animationPlayState = document.hidden
                    ? "paused"
                    : "running";
            }
        });

        // Pausa la animación al pasar el ratón por encima
        const tickerContainer = document.querySelector(
            ".stock-ticker-container",
        );
        if (tickerContainer) {
            tickerContainer.addEventListener("mouseenter", () => {
                const ticker = document.querySelector(".ticker");
                if (ticker) ticker.style.animationPlayState = "paused";
            });

            tickerContainer.addEventListener("mouseleave", () => {
                const ticker = document.querySelector(".ticker");
                if (ticker && !document.hidden)
                    ticker.style.animationPlayState = "running";
            });
        }
    });
</script>
